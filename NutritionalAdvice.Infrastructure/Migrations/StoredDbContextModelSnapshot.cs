// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NutritionalAdvice.Infrastructure.StoredModel;

#nullable disable

namespace NutritionalAdvice.Infrastructure.Migrations
{
    [DbContext(typeof(StoredDbContext))]
    partial class StoredDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Joseco.Outbox.Contracts.Model.OutboxMessage<NutritionalAdvice.Domain.Abstractions.DomainEvent>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("outboxId");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("text")
                        .HasColumnName("correlationId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean")
                        .HasColumnName("processed");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processedOn");

                    b.Property<string>("SpanId")
                        .HasColumnType("text")
                        .HasColumnName("spanId");

                    b.Property<string>("TraceId")
                        .HasColumnType("text")
                        .HasColumnName("traceId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("outboxMessage", "outbox");
                });

            modelBuilder.Entity("NutritionalAdvice.Infrastructure.StoredModel.Entities.IngredientStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Benefits")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Benefits");

                    b.Property<string>("DishCategory")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DishCategory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("Name");

                    b.Property<string>("Variety")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Variety");

                    b.HasKey("Id");

                    b.ToTable("ingredient");
                });

            modelBuilder.Entity("NutritionalAdvice.Infrastructure.StoredModel.Entities.MealPlanStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("DailyCalories")
                        .HasColumnType("integer")
                        .HasColumnName("DailyCalories");

                    b.Property<double>("DailyCarbohydrates")
                        .HasColumnType("double precision")
                        .HasColumnName("DailyCarbohydrates");

                    b.Property<double>("DailyFats")
                        .HasColumnType("double precision")
                        .HasColumnName("DailyFats");

                    b.Property<double>("DailyProtein")
                        .HasColumnType("double precision")
                        .HasColumnName("DailyProtein");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Description");

                    b.Property<string>("Goal")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Goal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<Guid>("NutritionistId")
                        .HasColumnType("uuid")
                        .HasColumnName("NutritionistId");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("PatientId");

                    b.HasKey("Id");

                    b.ToTable("mealplan");
                });

            modelBuilder.Entity("NutritionalAdvice.Infrastructure.StoredModel.Entities.MealTimeStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("MealPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("MealPlanId");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("Number");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid")
                        .HasColumnName("RecipeId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("MealPlanId");

                    b.HasIndex("RecipeId");

                    b.ToTable("mealtime");
                });

            modelBuilder.Entity("NutritionalAdvice.Infrastructure.StoredModel.Entities.RecipeIngredientStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("IngredientId");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("Quantity");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid")
                        .HasColumnName("RecipeId");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("UnitOfMeasure");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("recipeingredient");
                });

            modelBuilder.Entity("NutritionalAdvice.Infrastructure.StoredModel.Entities.RecipeStoredModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("Name");

                    b.Property<int>("Portions")
                        .HasColumnType("integer")
                        .HasColumnName("Portions");

                    b.HasKey("Id");

                    b.ToTable("recipe");
                });

            modelBuilder.Entity("NutritionalAdvice.Infrastructure.StoredModel.Entities.MealTimeStoredModel", b =>
                {
                    b.HasOne("NutritionalAdvice.Infrastructure.StoredModel.Entities.MealPlanStoredModel", "MealPlan")
                        .WithMany("MealTime")
                        .HasForeignKey("MealPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutritionalAdvice.Infrastructure.StoredModel.Entities.RecipeStoredModel", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealPlan");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("NutritionalAdvice.Infrastructure.StoredModel.Entities.RecipeIngredientStoredModel", b =>
                {
                    b.HasOne("NutritionalAdvice.Infrastructure.StoredModel.Entities.IngredientStoredModel", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutritionalAdvice.Infrastructure.StoredModel.Entities.RecipeStoredModel", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("NutritionalAdvice.Infrastructure.StoredModel.Entities.MealPlanStoredModel", b =>
                {
                    b.Navigation("MealTime");
                });

            modelBuilder.Entity("NutritionalAdvice.Infrastructure.StoredModel.Entities.RecipeStoredModel", b =>
                {
                    b.Navigation("RecipeIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
